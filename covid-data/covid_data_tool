#!/bin/bash
#
# Updates county file if it has been longer than 24 hours since the last one
# has been downloaded; Splits data for Harrisonburg city and Rockingham
# county into own separate csv files and then uses regular expressions
# and sed to convert csvs into valid json.

source scripts/csv_to_json

function update_hburg_rockingham_covid_data {
    # Checks if the files exists
    if [ ! -f harrisonburg.json ] ; then
        no_file=true
        echo "NOFILE"
    else
        # Reads last time data file was modified in epoch
        old_time=`date -d "$(date -r harrisonburg.json +"%Y-%m-%d %H:%M:%S")" +%s`
    fi

    # Reads current time in epoch
    now_time=`date +%s`

    # Checks if it has been more than 24 hours since data was last downloaded
    if [ "$no_file" = true ] || [ `(echo "$now_time-$old_time") | bc` -gt 86400 ] # 86400 seconds in 24 hours
    then
        printf "\nLonger than 24 hours since last update. Downloading new data... \n\n"

        # Download new data into a csv
        curl https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv > us-counties.csv

        csv_to_json "Harrisonburg city,Virginia" "Harrisonburg City" "harrisonburg" 
        csv_to_json "Rockingham,Virginia" "Rockingham" "rockingham" 
    else
        printf "\n---------- Data is up to date ----------\n\n"
    fi
}

# Update data

update_hburg_rockingham_covid_data

# Run python tool

../env/bin/python student_template.py